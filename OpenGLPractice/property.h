#pragma once

/*
----------------------------------------------------------
PROPERTIES/ACCESSORS - a C++ weird experiment

C++ does not naturally support properties a la C#; this is unfortunate because they're very convenient.
So using a series of weird tricks and adapting an existing solution found at http://www.codeguru.com/cpp/cpp/cpp_mfc/article.php/c4031/Implementing-a-Property-in-C.htm
with some additional tricks with macros and template specialization, I've sort of kind of approached properties!

These properties will always call their set on assignment, and implicitly call their get when they are cast to their underlying types. 
They'll be cast when parameters they're passed to explicitly call for that type, or when being assigned to something of that type. 
They will NOT be implicitly cast for template specializations (unfortunately) or when accessing fields of the underlying type. 
You can explicitly cast, or call the object's operator() which has the same effect.

To declare a property "properly", there are a variety of annoying steps, including making the property public while the field it wraps and 
its getter and/or setter are private. That's where the macros come in: 
	- PROP_G = property with get only
	- PROP_S = property with set only
	- PROP_GS = property with get and set

Pass in the containing class, the wrapped type, the desired property name, and then the body of the get and/or set wrapped in curly braces and all the necessary code 
will be autogenerated. A few notes: 
	- The property, if it has both get and set, can use all of the modified assignments, e.g. +=, 
	  which will just set the value to result of the operator on the current get and the new value
	- The setter must return a const& to the wrapped type. This can usually be accomplished by returning the internal assignment.


While properties in this form are [mostly] convenient, there's always more than one way to skin a cat. Efficient "properties" in C++ are often implemented as:
	- get only can be represented as a public const& to a private field
	- get and set can be represented as a public & to a private field
	- set only cannot be represented via a &
	- The previous three also apply to pointers, but that's more cumbersome
	- Finally, accessor methods for private fields

The first 4 bullets are easy enough to deal with, (though the first 3 delete the default operator=, if that was needed) 
but the last becomes cumbersome quickly. To respond to this, there are similar, more efficient macros for accessors as well:
	- ACCS_G = get only accessor
	- ACCS_S = set only accessor
	- ACCS_GS = get and set accessors

By default, these can simply be passed the type and name for the accessors and it will generate the basic type name() { return _name; } and 
void name(type value) { _name = value; }, but sometimes something more sophisticated is desired. This can be facilitated via the use of these qualifiers, 
which can be chained in the provided order: 
	1. _T = custom type for accessor(s). G and S take one type to replace the return type and passed type respectively, but GS takes both
	2. _C = custom body for accessor(s). G and S only require their specific one, but GS requires both

General notes for both properties and accessors:
	- The wrapped field will always be created as _name. You can refer to this in a private context for efficiency. (no protected option right now)
	- The macros must be in the appropriate access level (private or protected) or they will have side effects
	- The macros must be followed by a semicolon. Since the last statement of any of the macros declares the private field, 
	  it can either be left uninitialized (macro(...);) or be given a default value. (macro(...) = something;)
	- Inside the setter, the passed value is called 'value' (like C#) and can be referred to as such
	- As a general rule, parameters are passed in this order: type(s), name, body/bodies

Future developments:
	- If C++ ever gets around to adding operator., then properties could access their underlying fields without outward-facing casts, which would be nice.
	- The only major detraction for properties remaining is the inability to implicitly cast for template specializations, most glaringly operators. 
	  If there was a good way to get this to work, that would be great. (operator. might help with this in cases where the property is on the lhs, 
	  but the rhs case is still annoying)
----------------------------------------------------------
*/

#define DECL_FLD(type, name) type _ ## name

#define DEF_PROP_G(clss, type, access, name)  property<clss, type, access> name = property<clss, type, access>(this, &clss ## ::get_ ## name);
#define DEF_PROP_S(clss, type, access, name)  property<clss, type, access> name = property<clss, type, access>(this, &clss ## ::set_ ## name);
#define DEF_PROP_GS(clss, type, access, name) property<clss, type, access> name = property<clss, type, access>(this, &clss ## ::get_ ## name, &clss ## ::set_ ## name);

#define DEF_GET_P(type, name, body) type get_ ## name() body;
#define DEF_GET(t_get, name) DEF_GET_S_C(t_get, name, { return _ ## name; });
#define DEF_GET_C(t_get, name, body) t_get name() const body;

#define DEF_SET_P(type, name, body) const type& set_ ## name(type value) body;
#define DEF_SET(t_set, name) DEF_SET_S_C(t_set, name, { _ ## name = value; });
#define DEF_SET_C(t_set, name, body) void name(t_set value) body;

#define PROP_G(clss, type, name, get_body) public: DEF_PROP_G(clss, type, GET, name) private: DEF_GET_P(type, name, get_body) DECL_FLD(type, name)
#define PROP_S(clss, type, name, set_body) public: DEF_PROP_S(clss, type, SET, name) private: DEF_SET_P(type, name, set_body) DECL_FLD(type, name)
#define PROP_GS(clss, type, name, get_body, set_body) public: DEF_PROP_GS(clss, type, GET_SET, name) private: DEF_GET_P(type, name, get_body) DEF_SET_P(type, name, set_body) DECL_FLD(type, name)

#define ACCS_G(type, name)         public: DEF_GET(type, name)         private: DECL_FLD(type, name)
#define ACCS_G_C(type, name, body) public: DEF_GET_C(type, name, body) private: DECL_FLD(type, name)
#define ACCS_G_T(type, t_get, name)         public: DEF_GET(t_get, name)         private: DECL_FLD(type, name)
#define ACCS_G_T_C(type, t_get, name, body) public: DEF_GET_C(t_get, name, body) private: DECL_FLD(type, name)

#define ACCS_S(type, name)         public: DEF_SET(type, name)         private: DECL_FLD(type, name)
#define ACCS_S_C(type, name, body) public: DEF_SET_C(type, name, body) private: DECL_FLD(type, name)
#define ACCS_S_T(type, t_set, name)         public: DEF_SET(t_set, name)         private: DECL_FLD(type, name)
#define ACCS_S_T_C(type, t_set, name, body) public: DEF_SET_C(t_set, name, body) private: DECL_FLD(type, name)

#define ACCS_GS(type, name)                       public: DEF_GET(type, name)             DEF_SET(type, name)             private: DECL_FLD(type, name)
#define ACCS_GS_C(type, name, get_body, set_body) public: DEF_GET_C(type, name, get_body) DEF_SET_C(type, name, set_body) private: DECL_FLD(type, name)
#define ACCS_GS_T(type, t_get, t_set, name)                       public: DEF_GET(t_get, name)             DEF_SET(t_set, name)             private: DECL_FLD(type, name)
#define ACCS_GS_T_C(type, t_get, t_set, name, get_body, set_body) public: DEF_GET_C(t_get, name, get_body) DEF_SET_C(t_set, name, set_body) private: DECL_FLD(type, name)

enum property_type { GET = 1, SET = 2, GET_SET = 3 };
template <typename P, typename T, property_type pt> class property { };

template<class P, class T>
struct property<P, T, GET> {
	property<P, T, GET>(P* parent, T(P::*getter)()) : m_parent(parent), get(getter) { }
	inline T operator()() { return (m_parent->*get)(); }
	inline operator T() { return operator()(); }
private:
	P* m_parent = nullptr;
	T(P::*get)() = nullptr;
};

template<class P, class T>
struct property<P, T, SET> {
	property<P, T, SET>(P* parent, const T&(P::*setter)(T)) : m_parent(parent), set(setter) { }
	inline const T& operator=(T value) { return (m_parent->*set)(value); }
private:
	P* m_parent = nullptr;
	const T&(P::*set)(T) = nullptr;
};

template<class P, class T>
struct property<P, T, GET_SET> {
	property<P, T, GET_SET>(P* parent, T(P::*getter)(), const T&(P::*setter)(T)) : m_parent(parent), get(getter), set(setter) { }
	inline T operator()() { return g(); }
	inline operator T() { return g(); }
	inline const T& operator=(T value) { return (m_parent->*set)(value); }
	inline const T& operator+=(T value) { return operator=(g() + value); }
	inline const T& operator-=(T value) { return operator=(g() - value); }
	inline const T& operator*=(T value) { return operator=(g() * value); }
	inline const T& operator/=(T value) { return operator=(g() / value); }
	inline const T& operator&=(T value) { return operator=(g() & value); }
	inline const T& operator|=(T value) { return operator=(g() | value); }
	inline const T& operator^=(T value) { return operator=(g() ^ value); }
	inline const T& operator>>=(T value) { return operator=(g() >> value); }
	inline const T& operator<<=(T value) { return operator=(g() << value); }
private:
	P* m_parent = nullptr;
	T(P::*get)() = nullptr;
	const T&(P::*set)(T) = nullptr;
	inline T g() { return (m_parent->*get)(); }
};